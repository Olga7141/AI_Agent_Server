import 'dotenv/config';
import express from 'express';
import fetch from 'node-fetch';
import fs from 'fs';

const app = express();
app.use(express.json());

const APIFY_TOKEN = process.env.APIFY_TOKEN;
const ACTOR_ID = process.env.ACTOR_ID;

// üîπ –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Apify (–æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–µ—Ä–∞)
app.post('/parse', async (req, res) => {
    const { url, content } = req.body;
    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç Apify:', url);
    res.json({ message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã', url, content });
});

// üîπ –°—Ç–∞—Ä—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞
app.post('/–∞–Ω–∞–ª–∏–∑', async (req, res) => {
    const { url } = req.body;
    console.log('–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –Ω–∞ Apify...');

    try {
        // 1. –ó–∞–ø—É—Å–∫ –∞–∫—Ç–µ—Ä–∞
        const startRun = await fetch(`https://api.apify.com/v2/acts/${ACTOR_ID}/runs?token=${APIFY_TOKEN}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ startUrl: url }),
        });
        const startData = await startRun.json();

        if (!startData.data || !startData.data.id) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', startData);
            return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–∫—Ç—ë—Ä–∞' });
        }

        const runId = startData.data.id;
        console.log('–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω! ID:', runId);

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        let status = 'RUNNING';
        while (status === 'RUNNING') {
            await new Promise(r => setTimeout(r, 5000));
            const checkRun = await fetch(`https://api.apify.com/v2/actor-runs/${runId}?token=${APIFY_TOKEN}`);
            const checkData = await checkRun.json();
            status = checkData.data.status;
            console.log('–°—Ç–∞—Ç—É—Å:', status);
        }

        if (status !== 'SUCCEEDED') {
            return res.status(500).json({ error: '–ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–µ–π' });
        }

        // 3. –ó–∞–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const datasetId = startData.data.defaultDatasetId;
        const resultUrl = `https://api.apify.com/v2/datasets/${datasetId}/items?format=json&clean=true&token=${APIFY_TOKEN}`;
        const result = await fetch(resultUrl);
        const json = await result.json();

        fs.writeFileSync('result.json', JSON.stringify(json, null, 2), 'utf8');
        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ result.json');

        res.json({ message: '–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω', data: json });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

app.listen(3000, () => console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000'));
